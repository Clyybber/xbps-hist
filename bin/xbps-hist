#!/usr/bin/env bash

#-------#
# DEBUG #
#-------#{{{
#set -x
#}}}

#-------------#
# SCRIPE NAME #
#-------------#{{{
_name_="${0##*/}"
#}}}

#-----------#
# ERROR MSG #
#-----------#{{{
_em_(){ (&>2 printf "%s: %s \n" "${_name_^}" "$@") && exit 1 ;}
#}}}

#---------------#
# XBPS LOG FILE #
#---------------#{{{
_XBPS_DIR_="/var/log/socklog/xbps"
_XBPS_HISTORY_="/tmp/xbps_log"

: > $_XBPS_HISTORY_

while read -r L ; do
	cat $L >> $_XBPS_HISTORY_
done < <(ls  -1 ${_XBPS_DIR_}/*.u 2> /dev/null)

cat $_XBPS_DIR_/current 2> /dev/null >> $_XBPS_HISTORY_
#}}}

#------------------#
# SCRIPT VARIABLES #
#------------------#{{{
declare -A STATE=( ["install"]="Installed" ["remove"]="Removed" ["update"]="Updated" )
#}}}

#--------------------------#
# CHECK FOR CORRECT ACTION #
#--------------------------#{{{
_action_(){
case "${_ACTION_^^}" in
	INSTALL|REMOVE|UPDATE )
		_ACTION_="${STATE[${_ACTION_,,}]}"
		;;
	* )
		_em_ "Invalid action '$1'\nTry: '$_name_ -h' for more information"
		;;
esac
}
#}}}

#----------------#
# CHECK FOR DATE #
#----------------#{{{
_date_(){
if (date -d "$_DATE_" +%Y-%m-%d\ %H:%M:%S &> /dev/null); then
	_DATE_CHECK_=${_DATE_/ /T}
elif (date -d "$_DATE_" +%Y-%m-%d &> /dev/null); then
	_DATE_CHECK_="${_DATE_}T"
elif (date -d "$_DATE_" +%H:%M:%S &> /dev/null); then
	_DATE_CHECK_="T${_DATE_}"
else
	_em_ "Invalid date '$1'\nTry: '$_name_ -h' for more information"
fi
}
#}}}

#------------------------#
# LIST WITH OUT ARGUMENT #
#------------------------#{{{
_list_(){
while read -ra L ; do
	local PKG=${L[7]:1:-1}
	PKG=${PKG%-*}
	if [ "${L[6]}" = "$_ACTION_" -a "${L[8]}" = "successfully" ]; then
		local _DATE_=${L[0]%.*}
		_DATE_=${_DATE_/T/ }
		[ "$_FULL_" ] && echo -e "[ $_DATE_ ] ${L[7]:1:-1} , ${L[9]} ${L[10]}" || echo -e "[ $_DATE_ ] ${PKG}"
	fi
done < $_XBPS_HISTORY_ | column -t -s ","
}
#}}}

#-----------#
# LIST ALL  #
#-----------#{{{
_list_all_(){
while read -ra L ; do
	local PKG=${L[7]:1:-1}
	PKG=${PKG%-*}
	if [ "${L[8]}" = "successfully" ]; then
		local _DATE_=${L[0]%.*}
		_DATE_=${_DATE_/T/ }
		[ "$_FULL_" ] && echo -e "[ $_DATE_ ] ${L[7]:1:-1} , ${L[8]} , ${L[9]} ${L[10]}" || echo -e "[ $_DATE_ ] ${PKG} , ${L[6]}"
	fi
done < $_XBPS_HISTORY_ | column -t -s ","
}
#}}}

#--------------#
# LIST AT DATE #
#--------------#{{{
_list_date_(){
while read -ra L ; do
	local PKG=${L[7]:1:-1}
	PKG=${PKG%-*}
	if [[ "${L[0]}" =~ $_DATE_CHECK_ ]]; then
		if [ "${L[6]}" = "$_ACTION_" -a "${L[8]}" = "successfully" ]; then
			local _DATE_=${L[0]%.*}
			_DATE_=${_DATE_/T/ }
			[ "$_FULL_" ] && echo -e "[ $_DATE_ ] ${L[7]:1:-1} , ${L[9]} ${L[10]}" || echo -e "[ $_DATE_ ] ${PKG}"
		fi
	fi
done < $_XBPS_HISTORY_ | column -t -s ","
}
#}}}

#---------------#
# LIST DATE ALL #
#---------------#{{{
_list_date_all_(){
while read -ra L ; do
	local PKG=${L[7]:1:-1}
	PKG=${PKG%-*}
	if [[ "${L[0]}" =~ $_DATE_CHECK_ ]]; then
		if [ "${L[8]}" = "successfully" ]; then
			local _DATE_=${L[0]%.*}
			_DATE_=${_DATE_/T/ }
			[ "$_FULL_" ] && echo -e "[ $_DATE_ ] ${L[7]:1:-1} , ${L[6]} , ${L[9]} ${L[10]}" || echo -e "[ $_DATE_ ] ${PKG} , ${L[6]}"
		fi
	fi
done < $_XBPS_HISTORY_ | column -t -s ","
}
#}}}

#-----------------#
# SEACH ONLY NAME #
#-----------------#{{{
_search_(){
while read -ra L ; do
	local PKG=${L[7]:1:-1}
	PKG=${PKG%-*}
	if [ "${L[6]}" = "$_ACTION_" -a "${L[8]}" = "successfully" -a "$PKG" = "$_SEARCH_VAR_" ]; then
		local _DATE_=${L[0]%.*}
		_DATE_=${_DATE_/T/ }
		[ "$_FULL_" ] && echo -e "[ $_DATE_ ] ${L[7]:1:-1} , ${L[9]} ${L[10]}" || echo -e "[ $_DATE_ ] ${PKG}"
	fi
done < $_XBPS_HISTORY_ | column -t -s ","
}
#}}}

#------------#
# SEARCH ALL #
#------------#{{{
_search_all_(){
while read -ra L ; do
	local PKG=${L[7]:1:-1}
	PKG=${PKG%-*}
	if [ "$PKG" = "$_SEARCH_VAR_" -a "${L[8]}" = "successfully" ]; then
		local _DATE_=${L[0]%.*}
		_DATE_=${_DATE_/T/ }
		[ "$_FULL_" ] && echo -e "[ $_DATE_ ] ${L[7]:1:-1} , ${L[6]} , ${L[9]} ${L[10]}" || echo -e "[ $_DATE_ ] ${PKG} , ${L[6]}"
	fi
done < $_XBPS_HISTORY_ | column -t -s ","
}
#}}}

#-------------------#
# SEARCH WITH DATE  #
#-------------------#{{{
_search_date_(){
while read -ra L ; do
	local PKG=${L[7]:1:-1}
	PKG=${PKG%-*}
	if [[ "${L[0]}" =~ $_DATE_CHECK_ ]]; then
		if [ "${L[6]}" = "$_ACTION_" -a "${L[8]}" = "successfully" -a "$PKG" = "$_SEARCH_VAR_" ]; then
			local _DATE_=${L[0]%.*}
			_DATE_=${_DATE_/T/ }
			[ "$_FULL_" ] && echo -e "[ $_DATE_ ] ${L[7]:1:-1} , ${L[9]} ${L[10]}" || echo -e "[ $_DATE_ ] ${PKG}"
		fi
	fi
done < $_XBPS_HISTORY_ | column -t -s ","
}
#}}}

#-----------------------#
# SEARCH ALL WITH DATE  #
#-----------------------#{{{
_search_date_all_(){
while read -ra L ; do
	local PKG=${L[7]:1:-1}
	PKG=${PKG%-*}
	if [[ "${L[0]}" =~ $_DATE_CHECK_ ]]; then
		if [ "$PKG" = "$_SEARCH_VAR_" -a "${L[8]}" = "successfully" ]; then
			local _DATE_=${L[0]%.*}
			_DATE_=${_DATE_/T/ }
			[ "$_FULL_" ] && echo -e "[ $_DATE_ ] ${L[7]:1:-1} , ${L[6]} , ${L[9]} ${L[10]}" || echo -e "[ $_DATE_ ] ${PKG} , ${L[6]}"
		fi
	fi
done < $_XBPS_HISTORY_ | column -t -s ","
}
#}}}

#-------------#
# HELP DIALOG #
#-------------#{{{
_help_(){
cat <<- HELP
Usage: ${_name_} [OPTIONS] [PKGNAME...]

OPTIONS
 -a <ACTION>    What [ACTIONS] you looking for
 -d <DATE>      Set date and time to search
 -l             List all packages
 -s <PKG>       Search for speacial Package
 -f             Show full View
 -h             Show this help dialog

ACTIONS
 install         any use of xbps-install
 remove          any use of xbps-remove
 update          any use of xbps-install -Su

NOTE
 the search start from the day you install socklog-void and enable (socklog-unix nanoklogd) add \$USER to socklog GROUND
 Valide date and time : YYYY-MM-DD HH:MM:SS
HELP
}
#}}}

#---------------#
# MAIN FUNCTION #
#---------------#{{{
_main_(){
while getopts ":a:d:s:lfh" OPT; do
    case "$OPT" in
        a )
            _ACTION_="$OPTARG"
            ;;
        d )
            _DATE_="$OPTARG"
            ;;
        s )
            _SEARCH_="$OPTARG"
            ;;
        l )
            _LIST_=true
            ;;
        f )
            _FULL_=true
            ;;
        : )
            _em_ "Option '-$OPTARG' Requires an argument\nTry: '$_name_ -h' for more information"
            ;;
		* ) # wrong option
			_em_ "Invalid option -'$OPTARG'\nTry: '$_name_ -h' for more information"
			;;
    esac
done
shift "$((OPTIND-1))"
}
#}}}

#-------------------#
# RUN MAIN FUNCTION #
#-------------------#{{{
_main_ "$@"
#}}}

#-----------------------#
# CHECK AND RUN OPTIONS #
#-----------------------#{{{
[ "$_LIST_" && "$_SEARCH_" ] && _em_ "only one operation may be used at a time"
[ "$_ACTION_" ] && _action_
[ "$_DATE_" ]   && _date_
[ "$_LIST_"     && "$_ACTION_" ] && _list_ || _list_all_
[ "$_SEARCH_"   && "$_ACTION_" ] && _search_ || _search_all_
[ "$_DATE_"     && "$_ACTION_"   && "$_LIST_" ]     && _list_date_
[ "$_DATE_"     && ! "$_ACTION_" && "$_LIST_" ]     && _list_date_all_
[ "$_DATE_"     && "$_ACTION_"   && "$_SEARCH_" ]   && _search_date_
[ "$_DATE_"     && ! "$_ACTION_" && "$_SEARCH_" ]   && _search_date_all_
#}}}

