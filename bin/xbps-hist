#!/usr/bin/env bash

#-------------#
# SCRIPT NAME #
#-------------#
name="${0##*/}"
declare -A options

#-------------------#
# SOME BASH OPTIONS #
#-------------------#
shopt -u extglob nullglob

#-----------#
# ERROR MSG #
#-----------#{{{
die(){ 
    printf "%s: %b \n" "${name^}" "$@"  &>2
    exit 2
}
#}}}

#---------------#
# XBPS LOG FILE #
#---------------#{{{
XBPS_LOG_DIR="/var/log/socklog/xbps"
XBPS_TEMP=$(mktemp -q -t /tmp/$name.XXXXXX)

[ -f "$XBPS_TEMP" ] || touch "$XBPS_TEMP"

XBPS_LOG_FILES=( $XBPS_LOG_DIR/{*.[us],current} )

for log in ${XBPS_LOG_FILES[@]} ; do
    cat "$log" >> $XBPS_TEMP
done
#}}}

#------------------#
# SCRIPT VARIABLES #
#------------------#{{{
declare -A STATE=( ["install"]="Installed" ["remove"]="Removed" ["update"]="updating" )
#}}}

#---------#
# ACTION  #
#---------#
action_func(){
case "${ACTION^^}" in
    INSTALL|REMOVE|UPDATE ) action=${STATE[${ACTION,,}]} ;;
    * ) die "Invalid action '$1'. \nTry: '$name -h' for more information" ;;
esac
}

#------#
# DATE #
#------#
date_func(){
(date -d "$DATE" +%Y-%m-%d\ %H:%M:%S &> /dev/null) || die "Invalid date '$DATE'. \nTry: '$name -h' for more information"
}

#--------#
# SEARCH #
#--------#
search_func(){
while read -ra line ; do
    pkg_name=${line[7]%-*}
    pkg_name=${pkg_name:1}
    date_time="${line[0]%.*}"
    date_time="${date_time/T/ }"

    if [ "${options[a]}" ] && [ "${options[d]}" ] ; then
        if [ "$pkg_name" = "$SEARCH" ] && [ "$action" = "${line[6]}" ] && [[ $date_time =~ $DATE ]]; then
            [ "${line[8]}" = "successfully" ] &&  printf "%s\n" "$date_time ${line[6]}, $pkg_name, ${line[8]}, ${line[9]} ${line[10]}"
        fi
    elif [ "${options[a]}" ] ; then
        if [ "$pkg_name" = "$SEARCH" ] && [ "$action" = "${line[6]}" ]; then
            [ "${line[8]}" = "successfully" ] &&  printf "%s\n" "$date_time ${line[6]}, $pkg_name, ${line[8]}, ${line[9]} ${line[10]}"
        fi
    elif [ "${options[d]}" ] ; then
        if [ "$pkg_name" = "$SEARCH" ] && [[ $DATE =~ $date ]]; then
            [ "${line[8]}" = "successfully" ] &&  printf "%s\n" "$date_time ${line[6]}, $pkg_name, ${line[8]}, ${line[9]} ${line[10]}"
        fi
    else
        [ "$pkg_name" = "$SEARCH" ] && [ "${line[8]}" = "successfully" ] &&  printf "%s\n" "$date_time ${line[6]}, $pkg_name, ${line[8]}, ${line[9]} ${line[10]}"
    fi
done < $XBPS_TEMP | column -t -s ","
unset line pkg_name date_time
}

#------#
# LIST #
#------#
list_func(){
while  read -ra line ; do
    pkg_name=${line[7]%-*}
    pkg_name=${pkg_name:1}
    date_time="${line[0]%.*}"
    date_time="${date_time/T/ }"

    if [ "${options[a]}" ] && [ "${options[d]}" ] ; then
        if [ "$action" = "${line[6]}" ] && [[ $date_time =~ $DATE ]]; then
            [ "${line[8]}" = "successfully" ] &&  printf "%s\n" "$date_time ${line[6]}, $pkg_name, ${line[8]}, ${line[9]} ${line[10]}"
        fi
    elif [ "${options[a]}" ] ; then
        [ "$action" = "${line[6]}" ] && [ "${line[8]}" = "successfully" ] && printf "%s\n" "$date_time ${line[6]}, $pkg_name, ${line[8]}, ${line[9]} ${line[10]}"
    elif [ "${options[d]}" ] ; then
        [[ $date_time =~ $DATE ]] && [ "${line[8]}" = "successfully" ] && printf "%s\n" "$date_time ${line[6]}, $pkg_name, ${line[8]}, ${line[9]} ${line[10]}"
    else
        [ "${line[8]}" = "successfully" ] && printf "%s\n" "$date_time ${line[6]}, $pkg_name, ${line[8]}, ${line[9]} ${line[10]}"
    fi
done < $XBPS_TEMP | column -t -s ","
unset line pkg_name date_time
}

#-------------#
# HELP DIALOG #
#-------------#
help_func(){
while read ; do
    printf "%s \n" "$REPLY"
done <<- HELP
Usage: ${name} [OPTIONS] [PKGNAME...]

OPTIONS
 -a <ACTION>    What [ACTIONS] you looking for
 -d <DATE>      Set date and time to search
 -s <PKG>       Search for speacial Package
 -l             List all packages
 -h             Show this help dialog

ACTIONS
 install         any use of xbps-install
 remove          any use of xbps-remove
 update          any use of xbps-install -Su

NOTE
 the search start from the day you install (socklog-void) and enable (socklog-unix nanoklogd) add \$USER to socklog GROUND
 Valide date and time : YYYY-MM-DD HH:MM:SS
HELP
exit 0
}

#---------------#
# MAIN FUNCTION #
#---------------#
main_func(){
while getopts ":a:d:s:lfh" OPT ; do
    case "$OPT" in
        a ) options[a]=true 
            ACTION="$OPTARG" ;;
        d ) options[d]=true 
            DATE="$OPTARG" ;;
        s ) options[s]=true
            SEARCH="$OPTARG" ;;
        l ) options[l]=true ;;
        h ) options[h]=true ;;
        : ) die "Option '-$OPTARG' Requires an argument. \nTry: '$name -h' for more information" ;;
        * ) die "Invalid option -'$OPTARG'. \nTry: '$name -h' for more information" ;;
    esac
done
}

#--------------------#
# RUN MAIN FUNCTION  #
#--------------------#
main_func "$@"

#-----------------#
# RUN USER OPTION #
#-----------------#
[ "${options[s]}" ] && [ "${options[l]}" ] && die "only one operation may be used at a time. \nTry: '$name -h' for more information"
[ "${options[h]}" ] && help_func
[ "${options[a]}" ] && action_func
[ "${options[d]}" ] && date_func
[ "${options[s]}" ] && search_func
[ "${options[l]}" ] && list_func

# remove temp file
rm -f $XBPS_TEMP
